"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Commerce = /*#__PURE__*/function () {
  function Commerce(app) {
    (0, _classCallCheck2["default"])(this, Commerce);
    this.app = app;
  }

  (0, _createClass2["default"])(Commerce, [{
    key: "validatePlayPurchase",
    value: function () {
      var _validatePlayPurchase = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(packageName, productId, token) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!packageName || typeof packageName !== 'string')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Package Name must be provided and must be a string.');

              case 2:
                if (!(!productId || typeof productId !== 'string')) {
                  _context.next = 4;
                  break;
                }

                throw new Error('Product Id must be provided and must be a string.');

              case 4:
                if (!(!token || typeof token !== 'string')) {
                  _context.next = 6;
                  break;
                }

                throw new Error('Token must be provided and must be a string.');

              case 6:
                return _context.abrupt("return", this.app.request.get({
                  url: this.app.urls.commerceValidate(packageName, productId, token)
                }));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function validatePlayPurchase(_x, _x2, _x3) {
        return _validatePlayPurchase.apply(this, arguments);
      }

      return validatePlayPurchase;
    }()
  }, {
    key: "cancelPlaySubscription",
    value: function () {
      var _cancelPlaySubscription = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(packageName, subscriptionId, token) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!packageName || typeof packageName !== 'string')) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('Package Name must be provided and must be a string.');

              case 2:
                if (!(!subscriptionId || typeof subscriptionId !== 'string')) {
                  _context2.next = 4;
                  break;
                }

                throw new Error('Subscription Id must be provided and must be a string.');

              case 4:
                if (!(!token || typeof token !== 'string')) {
                  _context2.next = 6;
                  break;
                }

                throw new Error('Token must be provided and must be a string.');

              case 6:
                return _context2.abrupt("return", this.app.request.post({
                  url: this.app.urls.commerceSubCancel(packageName, subscriptionId, token)
                }));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function cancelPlaySubscription(_x4, _x5, _x6) {
        return _cancelPlaySubscription.apply(this, arguments);
      }

      return cancelPlaySubscription;
    }()
  }, {
    key: "getPlaySubscriptionStatus",
    value: function () {
      var _getPlaySubscriptionStatus = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(packageName, subscriptionId, token) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!packageName || typeof packageName !== 'string')) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('Package Name must be provided and must be a string.');

              case 2:
                if (!(!subscriptionId || typeof subscriptionId !== 'string')) {
                  _context3.next = 4;
                  break;
                }

                throw new Error('Subscription Id must be provided and must be a string.');

              case 4:
                if (!(!token || typeof token !== 'string')) {
                  _context3.next = 6;
                  break;
                }

                throw new Error('Token must be provided and must be a string.');

              case 6:
                return _context3.abrupt("return", this.app.request.get({
                  url: this.app.urls.commerceSubStatus(packageName, subscriptionId, token)
                }));

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getPlaySubscriptionStatus(_x7, _x8, _x9) {
        return _getPlaySubscriptionStatus.apply(this, arguments);
      }

      return getPlaySubscriptionStatus;
    }()
  }]);
  return Commerce;
}();

exports["default"] = Commerce;
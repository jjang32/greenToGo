"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _logger = _interopRequireDefault(require("./logger"));

var Logging = /*#__PURE__*/function () {
  function Logging(app) {
    (0, _classCallCheck2["default"])(this, Logging);
    this.app = app;
    this.reset();
  }

  (0, _createClass2["default"])(Logging, [{
    key: "reset",
    value: function reset() {
      this.loggers = {};
      this.pool = [];
      this.numOfMessages = 10;
      this.timeFrequency = 1;
    }
  }, {
    key: "getLogger",
    value: function getLogger(loggerName) {
      if (!loggerName || typeof loggerName !== 'string') {
        throw new Error('Logger Name must be provided and must be a string.');
      }

      if (!this.loggers[loggerName]) {
        this.loggers[loggerName] = new _logger["default"](loggerName, this);
      }

      return this.loggers[loggerName];
    }
  }, {
    key: "flush",
    value: function () {
      var _flush = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _this = this;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.flushRequest && this.pool.length) {
                  this.stopFlushInterval();
                  this.flushRequest = this.app.request.put({
                    url: this.app.urls.logging(),
                    data: this.pool
                  }).then(function () {
                    delete _this.flushRequest;
                  });
                  this.pool = [];
                }

                return _context.abrupt("return", this.flushRequest);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function flush() {
        return _flush.apply(this, arguments);
      }

      return flush;
    }()
  }, {
    key: "push",
    value: function push(logger, logLevel, message, exception) {
      this.pool.push({
        logger: logger,
        message: message,
        exception: exception,
        'log-level': logLevel,
        timestamp: Date.now()
      });
      this.checkMessagesLen();
    }
  }, {
    key: "checkMessagesLen",
    value: function checkMessagesLen() {
      if (this.pool.length >= this.numOfMessages) {
        this.startFlushInterval();
      }
    }
  }, {
    key: "startFlushInterval",
    value: function startFlushInterval() {
      var _this2 = this;

      if (!this.flushInterval) {
        this.flushInterval = setTimeout(function () {
          return _this2.flush();
        }, this.timeFrequency * 1000);
      }
    }
  }, {
    key: "stopFlushInterval",
    value: function stopFlushInterval() {
      if (this.flushInterval) {
        clearTimeout(this.flushInterval);
        delete this.flushInterval;
      }
    }
  }, {
    key: "setLogReportingPolicy",
    value: function setLogReportingPolicy(numOfMessages, timeFrequency) {
      if (timeFrequency !== undefined && this.timeFrequency !== timeFrequency) {
        this.stopFlushInterval();
      }

      this.numOfMessages = numOfMessages;
      this.timeFrequency = timeFrequency;
      this.checkMessagesLen();
    }
  }]);
  return Logging;
}();

exports["default"] = Logging;
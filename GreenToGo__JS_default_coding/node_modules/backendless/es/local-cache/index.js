"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = _interopRequireDefault(require("../utils"));

var _virtualStorage = _interopRequireDefault(require("./virtual-storage"));

var _localStorage = _interopRequireDefault(require("./local-storage"));

var STORAGE_KEY_NAMESPACE = 'Backendless';

var LocalCache = /*#__PURE__*/function () {
  function LocalCache(app) {
    (0, _classCallCheck2["default"])(this, LocalCache);
    this.app = app;
    this.storageName = "".concat(STORAGE_KEY_NAMESPACE, "_").concat(this.app.applicationId);
    var Storage = _utils["default"].isLocalStorageSupported ? _localStorage["default"] : _virtualStorage["default"];
    this.setStorage(Storage);
    this.Keys = {
      USER_TOKEN: 'user-token',
      CURRENT_USER_ID: 'current-user-id',
      STAY_LOGGED_IN: 'stayLoggedIn'
    };
  }

  (0, _createClass2["default"])(LocalCache, [{
    key: "setStorage",
    value: function setStorage(Storage) {
      this.storage = new Storage(this.storageName, STORAGE_KEY_NAMESPACE);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      this.storage.set(key, value);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.storage.get(key);
    }
  }, {
    key: "remove",
    value: function remove(key) {
      this.storage.remove(key);
    }
  }]);
  return LocalCache;
}();

exports["default"] = LocalCache;
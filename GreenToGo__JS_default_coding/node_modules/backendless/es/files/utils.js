"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var FilesUtils = {
  ensureSlashInPath: function ensureSlashInPath(path) {
    return !path.startsWith('/') ? "/".concat(path) : path;
  },
  preventSlashInPath: function preventSlashInPath(path) {
    return path && path.startsWith('/') ? path.slice(1) : path;
  },
  parseFilePath: function parseFilePath(path) {
    var result = {
      filePath: path,
      fileName: null
    };

    if (path) {
      var tokens = path.split('/');

      if (tokens[tokens.length - 1].includes('.')) {
        result.fileName = tokens.pop();
        result.filePath = tokens.join('/');
      }
    }

    return result;
  },
  sanitizeFileName: function sanitizeFileName(fileName) {
    return encodeURIComponent(fileName).replace(/'/g, '%27').replace(/"/g, '%22');
  },
  getFileName: function getFileName(file) {
    if (file.name) {
      return file.name;
    }

    if (file.path) {
      var path = file.path.split('/');
      return path[path.length - 1]; //last item of the file path
    }
  },
  toBase64: function toBase64(content) {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof Blob !== 'undefined')) {
                _context.next = 3;
                break;
              }

              if (!(content instanceof Blob)) {
                content = new Blob([content], {
                  type: ''
                });
              }

              return _context.abrupt("return", new Promise(function (resolve, reject) {
                var reader = new FileReader();

                reader.onerror = function (error) {
                  return reject(error);
                };

                reader.onload = function (event) {
                  return resolve(event.target.result.split(';base64,')[1]);
                };

                reader.readAsDataURL(content);
              }));

            case 3:
              if (!(typeof Buffer !== 'undefined')) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", Buffer.from(content).toString('base64'));

            case 5:
              return _context.abrupt("return", content);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  }
};
var _default = FilesUtils;
exports["default"] = _default;